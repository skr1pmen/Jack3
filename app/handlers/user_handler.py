import asyncio
import json
import re
import aiohttp
import sys
import websockets

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from bs4 import BeautifulSoup
from app.database.base_model import Database
from app.config import DATABASE, URL, SCHEDULE, USERAGENT, ADMINS
from app.utils.group import Group, AddGroup
from app.utils.suggestion import Suggestion
from app.utils.message import Message as message_text
from app.groups import group as group_list
from app.keyboards import main_keyboard, settings_keyboard, not_group_keyboard, additional_classes_kb
from aiogram.utils.markdown import hlink
from datetime import datetime
from app import config
from app.utils.utils import *

user_router = Router()
db = Database(DATABASE['HOST'], DATABASE['USERNAME'], DATABASE['PASSWORD'], DATABASE['BASENAME'])

# db.execute("""insert into logs (type, message) values ('info', %s)""", "Bot started (tested)" if '--test-start' in sys.argv else "Bot started")

@user_router.message(CommandStart())
async def start_cmd(msg: Message, state: FSMContext):
    user_exists = db.fetch("""SELECT id FROM users WHERE chat_id = %s""", msg.chat.id)
    if not user_exists:
        welcome_message = (f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! –Ø –î–∂–µ–∫, –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ "
                           f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã,—Ç–æ —É–∫–∞–∂–∏, "
                           f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.\n<i>–ü—Ä–∏–º–µ—Ä: –ú–ö-22</i>"
                           f"\n\n‚ö†–í–Ω–∏–º–∞–Ω–∏–µ!‚ö† –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, "
                           f"–æ–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        sticker_hi = 'CAACAgIAAxkBAAEFxFRjFnKx2k7rTEcWbXsJu0z5xlTMUwACiBEAArOMcUnCJQLlwkLsoikE'

        await state.set_state(Group.group)
        await msg.answer_sticker(sticker_hi)
        await msg.answer(welcome_message, reply_markup=not_group_keyboard.main())
        db.execute(f"""insert into logs (type, message) values ('info', 'The user with id {msg.from_user.id} has joined the bot')""")
    else:
        code = db.fetch("""SELECT class FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
        await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É –º–µ–Ω—è. "
                         f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–µ –Ω—É–∂–Ω–æ!", reply_markup=main_keyboard.main(URL + str(code)))
        db.execute(f"""insert into logs (type, message) values ('info', 'User with id {msg.chat.id} tried to re-register')""")


@user_router.message(F.text.lower() == "—è –ø–æ–∫–∞ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç –∫–æ–ª–ª–µ–¥–∂–∞ üéì")
async def get_schedule_cmd(msg: Message):
    await msg.answer(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∏—á–µ–º –∫—Ä–æ–º–µ –∫–∞–∫ –¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–ª–ª–µ–¥–∂–∞. –Ø –Ω–∞–¥–µ—é—Å—å —ç—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç üëç\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
        "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: 355044, –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π, –≥. –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å, –ø—Ä. –Æ–Ω–æ—Å—Ç–∏, –¥. 3\n"
        "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: 355044, –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π, –≥. –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å, –ø—Ä. –Æ–Ω–æ—Å—Ç–∏, –¥. 3\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –∏ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
        "<b>–†–µ–∂–∏–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π:</b> –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—á–µ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –≤ –ø–µ—Ä–∏–æ–¥ —Å 8.00 –¥–æ 20.00\n\n"
        "<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ì–ë–ü–û–£ –°–†–ú–ö:</b>\n"
        "<b>–û–±—â–∏–π</b>: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –ø—è—Ç–Ω–∏—Ü–∞ —Å 8.00 –¥–æ 17.00; –ø–µ—Ä–µ—Ä—ã–≤ —Å 12.00 –¥–æ 13.00\n"
        "<b>–ß–∏—Ç–∞–ª—å–Ω—ã–π –∑–∞–ª</b>: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—è—Ç–Ω–∏—Ü–∞ —Å 8.00 –¥–æ 17.00\n"
        "<b>–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b>: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞ —Å 8.00 –¥–æ 17.00\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ñ–∞–∫—Å: 8-(8652)-39-21-10\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
        "–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: srmk@mosk.stavregion.ru"
    )

@user_router.message(Group.group)
async def set_group_cmd(msg: Message, state: FSMContext):
    await state.update_data(group=msg.text)
    data = await state.get_data()
    await state.clear()
    for name, code in group_list.items():
        if name == data['group'].lower():
            if bool(db.fetch("""SELECT COUNT(*) FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]) is False:
                db.execute(
                    """INSERT INTO users (name, surname, username, class, chat_id) VALUES (%s, %s, %s, %s, %s)""",
                    msg.from_user.first_name, msg.from_user.last_name, msg.from_user.username, code, msg.chat.id
                )
                db.execute("""UPDATE statistics SET added = added + 1""")
                db.execute(
                    f"""insert into logs (type, message) values ('info', 'The user with id {msg.from_user.id} has completed registration and is now receiving a schedule')""")
            else:
                db.execute("""UPDATE users SET class = %s WHERE chat_id = %s""", code, msg.chat.id)
                db.execute(
                    f"""insert into logs (type, message) values ('info', 'The user with id {msg.from_user.id} has changed his group')""")
            await msg.answer(
                "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.",
                reply_markup=main_keyboard.main(f"{URL}{code}"))
            break
        continue
    else:
        await state.set_state(Group.group)
        await msg.answer("–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑!")


@user_router.message(F.text.lower() == "—Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π ‚≠ï")
@user_router.message(Command('db_reset'))
async def db_reset_cmd(msg: Message):
    user_class = db.fetch("""SELECT class FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
    if msg.chat.id in ADMINS:
        db.execute("""TRUNCATE schedules""")
        [db.execute(
            """INSERT INTO schedules (class) VALUES (%s)""", code)
            for _, code in group_list.items()]
        await msg.answer("–£—Å–ø–µ—à–Ω–æ‚ùï\n–ë–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞!",
                         reply_markup=main_keyboard.main(URL + str(user_class)))
        db.execute(f"""insert into logs (type, message) values ('info', 'All band schedules have been reset')""")
    else:
        await msg.answer("–û—à–∏–±–∫–∞‚ùó\n–¢–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!",
                         reply_markup=main_keyboard.main(URL + str(user_class)))
        db.execute(f"""insert into logs (type, message) values ('warning', 'User {msg.chat.id} attempted to reset the group schedule')""")


@user_router.message(Command('get_statistics'))
async def get_statistics(bot: Bot):
    statistics = db.fetch("""SELECT * FROM statistics""")[0]
    db.execute("""UPDATE statistics SET added = 0, delete = 0""")
    db.execute(
        """INSERT INTO statistics_history (week, year, added, deleted) VALUES (%s, %s, %s, %s)""",
        datetime.now().isocalendar().week - 1,
        datetime.now().isocalendar().year,
        statistics[0],
        statistics[1]
    )
    db.execute(f"""insert into logs (type, message) values ('info', 'The statistics for the week have been updated')""")
    await bot.send_message(ADMINS[0],
                           f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n+{statistics[0]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüéâüéâüéâ\n"
                           f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {statistics[1]}!")


@user_router.message(Command('update_schedule'))
async def get_new_schedule(bot: Bot):
    if not db.fetch("""SELECT mailing FROM bot_settings""")[0][0]:
        return
    # Overwriting the old schedule for future comparison with the new one
    old_schedule = [db.fetch(
        """SELECT schedule FROM schedules WHERE class = %s""", code)[0][0]
                    for _, code in group_list.items()]

    # Obtaining new data from the college website
    aiohttp_client = aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False))
    try:
        tasks = [aiohttp_client.get(f"{URL}{code}", headers=USERAGENT) for name, code in group_list.items()]
        tasks_finish = await asyncio.gather(*tasks)
        codes = [code for _, code in group_list.items()]
        for task_item, task in enumerate(tasks_finish):
            if task.status == 200:
                schedule = await task.text()
                soup = BeautifulSoup(schedule, "html.parser")

                i = 1
                for number in soup.find_all('td', class_="thead"):
                    finish = re.sub(r'[|‚Äî\n]', '', number.get_text())
                    if i == 1:
                        SCHEDULE['today']['day'] = finish.strip()
                    elif i == 9:
                        SCHEDULE['tomorrow']['day'] = finish.strip()
                    i += 1

                i = 1
                for item in soup.find_all('td', class_="td-bold"):
                    finish = re.sub(r'[|‚Äî\n]', '', item.get_text())

                    if i <= 7:
                        if finish.strip() == "":
                            SCHEDULE['today'][i] = "–ù–µ—Ç –ø–∞—Ä—ã"
                        else:
                            SCHEDULE['today'][i] = finish.strip()
                    else:
                        if finish.strip() == "":
                            SCHEDULE['tomorrow'][i - 7] = "–ù–µ—Ç –ø–∞—Ä—ã"
                        else:
                            SCHEDULE['tomorrow'][i - 7] = finish.strip()
                    i += 1

                async def schedule_comparison(old_schedule, new_schedule):
                    if old_schedule is not None:
                        new = []
                        old = []

                        for _, value_old in old_schedule.items():
                            old.append(value_old['day'])
                            for i in range(1, 8):
                                old.append(value_old[f'{i}'])
                        for _, value_new in new_schedule.items():
                            new.append(value_new['day'])
                            for i in range(1, 8):
                                new.append(value_new[i])

                        return old == new
                    else:
                        return False

                comparison = await schedule_comparison(old_schedule[task_item], SCHEDULE)
                if not comparison:
                    schedule_json = json.dumps(SCHEDULE, ensure_ascii=False)

                    db.execute("""UPDATE schedules SET schedule = %s WHERE class = %s""", schedule_json,
                               codes[task_item])
                    chats_id = db.fetch("""SELECT chat_id FROM users WHERE class = %s OR %s = ANY(additional_classes)""", codes[task_item], codes[task_item])
                    if chats_id is not None:
                        for chat_id in chats_id:
                            schedule = json.loads(schedule_json)
                            message = await schedule_converter(schedule)
                            try:
                                await bot.send_message(
                                    int(chat_id[0]),
                                    f"–ù–∞ —Å–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{message}",
                                    reply_markup=main_keyboard.main(URL + str(codes[task_item])))
                            except Exception as e:
                                db.execute("""DELETE FROM users WHERE chat_id = %s""", int(chat_id[0]))
                                db.execute("""UPDATE statistics SET delete = delete + 1""")
                                db.execute(f"""insert into logs (type, message) values ('error', '{e}')""")
            else:
                db.execute(f"""insert into logs (type, message) values ('error', 'The site did not provide a response for the {task.url} group')""")
                raise Exception(f"–°–∞–π—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {task.url}")
    except Exception as e:
        print(e)
        db.execute("""insert into logs (type, message) values ('error', %s)""", e)
    finally:
        await aiohttp_client.close()


async def schedule_converter(schedule):
    message = f"<b>{schedule['today']['day']}</b>\n"
    lessons = schedule['today']
    i = 1
    while i <= 7:
        message += f"<b>{i}: </b>" + lessons[f'{i}'] + "\n"
        if i != 7:
            i += 1
        else:
            break
    message += f"<b>{schedule['tomorrow']['day']}</b>\n"
    lessons = schedule['tomorrow']
    i = 1
    while i <= 7:
        message += f"<b>{i}: </b>" + lessons[f'{i}'] + "\n"
        if i != 7:
            i += 1
        else:
            break
    return message


@user_router.message(F.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ")
async def get_schedule_cmd(msg: Message, state: FSMContext):
    user_class = db.fetch("""SELECT class, additional_classes FROM users WHERE chat_id = %s""", msg.chat.id)[0]

    async def error_def():
        await msg.answer(
            f"–ü—Ä–æ—Å—Ç–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–µ–π—á–∞—Å.\n"
            f"–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.\n<i>–ü—Ä–∏–º–µ—Ä: –ú–ö-22</i>")
        await state.set_state(Group.group)

    try:
        if user_class[0] != 0:
            class_schedule = db.fetch(
                """SELECT schedule FROM schedules WHERE class = %s""",
                user_class[0]
            )[0][0]
            if not class_schedule:
                await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")
                return
            await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{(await get_group_name_by_class_code(user_class[0])).upper()}</b>:\n\n{await schedule_converter(class_schedule)}")
        else:
            await error_def()
            return

        if user_class[1]:
            for group in user_class[1]:
                class_schedule = db.fetch(
                    """SELECT schedule FROM schedules WHERE class = %s""",
                    group
                )[0][0]
                if not class_schedule:
                    await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")
                    return
                await msg.answer(
                    f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{(await get_group_name_by_class_code(group)).upper()}</b>:\n\n{await schedule_converter(class_schedule)}")

    except Exception as e:
        # await error_def()
        print(e, f"\n{user_class[0]}")


@user_router.message(F.text.lower() == "–∑–≤–æ–Ω–∫–∏ üîî")
async def get_bell_cmd(msg: Message):
    with open("./app/bell.json", encoding="utf-8") as bell:
        bell = json.load(bell)
        bell_text: str = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n"
        for day in bell:
            bell_text += f"\n<b>{day}</b>:\n"
            for line in bell[f"{day}"]:
                bell_text += f"<b>{line}</b>: {bell[day][line]}\n"
    await msg.answer(bell_text)


@user_router.message(F.text.lower() == "–ø–æ–º–æ—â—å üìû")
async def get_help_cmd(msg: Message):
    await msg.answer("–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–∞–∫–∏—Ö –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤/–æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @skr1pmen. "
                     "–í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å #JackBot")


@user_router.message(F.text.lower() == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô")
async def get_settings_cmd(msg: Message):
    if msg.chat.id in ADMINS:
        if db.fetch("""SELECT mailing FROM bot_settings""")[0][0]:
            await msg.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                             reply_markup=settings_keyboard.settings(
                                 url=f"https://jack.skr1pmen.ru/login?id={msg.chat.id}"))
        else:
            await msg.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                             reply_markup=settings_keyboard.settings(
                                 mailing=False, url=f"https://jack.skr1pmen.ru/login?id={msg.chat.id}"))
    else:
        await msg.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                         reply_markup=settings_keyboard.user_settings())


@user_router.message(F.text.lower() == "–Ω–∞–∑–∞–¥ ‚óÄ")
async def back_cmd(msg: Message):
    user_class = db.fetch("""SELECT class FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
    await msg.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é", reply_markup=main_keyboard.main(URL + str(user_class)))


@user_router.message(F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É üìî")
async def edit_group_cmd(msg: Message, state: FSMContext):
    db.execute("""UPDATE users SET class = 0 WHERE chat_id = %s""", msg.chat.id)
    await state.set_state(Group.group)
    await msg.answer("–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –µ—ë –∏–∑–º–µ–Ω–∏—Ç—å.\n<i>–ü—Ä–∏–º–µ—Ä: –ú–ö-22</i>")


@user_router.message(F.text.lower() == "–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üìÆ")
@user_router.message(F.text.lower() == "–≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üìÆ")
async def switching_mailing_cmd(msg: Message):
    db.execute("""UPDATE bot_settings SET mailing = not mailing""")
    user_class = db.fetch("""SELECT class FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
    await msg.answer("–£—Å–ø–µ—à–Ω–æ‚ùï\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.", reply_markup=main_keyboard.main(URL + str(user_class)))
    db.execute(f"""insert into logs (type, message) values ('info', 'Schedule notifications disabled/enabled')""")


@user_router.message(F.text.lower() == "—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨")
async def message_distribution_cmd(msg: Message, state: FSMContext):
    user_class = db.fetch("""SELECT class FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
    if msg.chat.id in ADMINS:
        await state.set_state(message_text.message)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n<i>–®–∞–±–ª–æ–Ω—ã:\n{name} - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                         "{my} - @skr1pmen\n{bot} - –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞</i>",
                         reply_markup=main_keyboard.main(URL + str(user_class)))
    else:
        await msg.answer("–û—à–∏–±–∫–∞‚ùó\n–¢–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!",
                         reply_markup=main_keyboard.main(URL + str(user_class)))
        db.execute(f"""insert into logs (type, message) values ('error', 'User {msg.chat.id} attempted to do a mailing')""")


@user_router.message(message_text.message)
async def set_message_cmd(msg: Message, state: FSMContext, bot: Bot):
    await state.update_data(message=msg.text)
    data = await state.get_data()
    await state.clear()
    await msg.answer("–£—Å–ø–µ—à–Ω–æ‚ùï\n–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è.")
    data = data["message"]
    all_users = db.fetch("""SELECT chat_id, name, class FROM users""")
    for user in all_users:  # user[0] -> id, user[1] -> user name
        try:
            if user[0] == msg.chat.id:
                continue
            await bot.send_message(
                user[0],
                data.replace("{name}", user[1])
                .replace("{my}", "@skr1pmen")
                .replace("{bot}", hlink("Jack","https://t.me/srmk_bot?start=1")),
                reply_markup=main_keyboard.main(URL + str(user[2]))
            )
        except Exception as e:
            db.execute("""DELETE FROM users WHERE chat_id = %s""", user[0])
            db.execute(f"""insert into logs (type, message) values ('error', '{e}')""")
    db.execute(f"""insert into logs (type, message) values ('info', 'User {msg.chat.id} made a distribution')""")


@user_router.message(Command('update_users_data'))
async def update_users_data(msg: Message, bot: Bot):
    if msg.chat.id in ADMINS:
        users = db.fetch("""SELECT * FROM users ORDER BY id""")
        await msg.answer('–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
        db.execute(f"""insert into logs (type, message) values ('warning', 'Start global update user data')""")
        for user in users:
            data = await bot.get_chat(user[1])
            db.execute("""UPDATE users SET name = %s, surname = %s, username = %s WHERE chat_id = %s""", data.first_name, data.last_name, data.username, user[1])
            print(data.id)
        await msg.answer("–ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
    else:
        await msg.answer("–û—à–∏–±–∫–∞‚ùó\n–¢–µ–±–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        db.execute(
            f"""insert into logs (type, message) values ('warning', 'User {msg.chat.id} attempted to update the data of all users')""")


# –ü—Ä–µ–¥–ª–æ–∂–∫–∞
@user_router.message(F.text.lower()[:-2] == "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")
async def suggestion_ideas(msg: Message, state: FSMContext):
    await state.set_state(Suggestion.suggestion)
    await msg.answer(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É '/cancel'.",
        reply_markup=main_keyboard.suggestion_idea_kb()
    )

@user_router.message(Suggestion.suggestion)
async def set_message_cmd(msg: Message, state: FSMContext, bot: Bot):
    await state.update_data(message=msg.text)
    text = await state.get_data()
    await state.clear()
    user_class = db.fetch("""SELECT class FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
    if text['message'].lower() in '–æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥' or text['message'].lower() in '/cancel':
        await msg.answer(
            "–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è.",
            reply_markup=main_keyboard.main(URL + str(user_class))
        )
    else:
        user_id = db.fetch("""SELECT id FROM users WHERE chat_id = %s""", msg.chat.id)[0][0]
        idea_id = db.fetch(
            """insert into ideas (user_id, idea) values (%s, %s) returning id""",
            user_id, text['message']
        )
        db.execute(
            f"""insert into logs (type, message) values ('info', %s)""",
            f'User {msg.chat.id} suggested idea #{idea_id[0][0]}'
        )
        await msg.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –∏–¥–µ—é! –ú—ã –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=main_keyboard.main(URL + str(user_class))
        )


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
async def connect_to_server(bot: Bot):
    async with websockets.connect(config.WS_SERVER) as websocket:
        db.execute(f"""insert into logs (type, message) values ('info', 'Server connected')""")
        while True:
            message_json = await websocket.recv()
            message = json.loads(message_json)

            if message['user_id']:
                users = db.fetch("""SELECT name, class FROM users WHERE chat_id = %s""", message['user_id'])
                await bot.send_message(
                    chat_id=message["user_id"],
                    text=message["message"].replace("{name}", users[0])
                            .replace("{my}", "@skr1pmen")
                            .replace("{bot}", hlink("Jack","https://t.me/srmk_bot?start=1")),
                    reply_markup=main_keyboard.main(URL + str(user[1]))
                )
            else:
                all_users = db.fetch("""SELECT chat_id, name, class FROM users""")
                for user in all_users:  # user[0] -> id, user[1] -> user name
                    try:
                        await bot.send_message(
                            user[0],
                            message["message"].replace("{name}", user[1])
                                .replace("{my}", "@skr1pmen")
                                .replace("{bot}", hlink("Jack","https://t.me/srmk_bot?start=1")),
                            reply_markup=main_keyboard.main(URL + str(user[2]))
                        )
                    except Exception as e:
                        db.execute("""DELETE FROM users WHERE chat_id = %s""", user[0])
                        db.execute("""UPDATE statistics SET delete = delete + 1""")
                        db.execute(f"""insert into logs (type, message) values ('error', '{e}')""")
                db.execute(f"""insert into logs (type, message) values ('info', 'The mailing from the site has started')""")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.message(F.text.lower()[:-2] == "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã")
async def additional_classes_settings(msg: Message):
    groups_data = db.fetch("""select additional_classes from users where chat_id = %s""", msg.chat.id)[0][0]

    groups = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    if groups_data:
        group_names = [(await get_group_name_by_class_code(group)).upper() for group in groups_data]
        groups = ', '.join(group_names) if group_names else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    await msg.answer(f"–¢–≤–æ–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{groups}", reply_markup=additional_classes_kb.main())

@user_router.callback_query(F.data == "add_group")
async def add_group_btn(call: CallbackQuery, state: FSMContext):
    await call.answer('')

    await state.set_state(AddGroup.additional_group)

    await call.message.edit_text(
        f"–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∫-22</i>",
        reply_markup=None
    )

@user_router.message(AddGroup.additional_group)
async def additional_group(msg: Message, state: FSMContext):
    groups = db.fetch("""select class, additional_classes from users where chat_id = %s""", msg.chat.id)[0]

    await state.update_data(additional_group=msg.text)
    data = await state.get_data()
    await state.clear()

    main_group = groups[0]
    additional_group = [] if not groups[1] else groups[1]

    if data['additional_group'].lower() in group_list:
        code = group_list[data['additional_group'].lower()]
        if code == main_group or code in additional_group:
            await msg.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
            await state.set_state(AddGroup.additional_group)
        else:
            additional_group.append(code)
            db.execute(
                """update users set additional_classes = %s where chat_id = %s""",
                additional_group, msg.chat.id
            )
            await msg.answer(
                "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.",
                reply_markup=main_keyboard.main(f"{URL}{main_group}"))
    else:
        await msg.answer("–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑!")
        await state.set_state(AddGroup.additional_group)

@user_router.callback_query(F.data == "del_group")
async def del_group_btn(call: CallbackQuery):
    groups = db.fetch("""select additional_classes from users where chat_id = %s""", call.message.chat.id)[0][0]

    await call.answer('')
    if not groups:
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return
    groups_dict = {}
    for group in groups:
        groups_dict[await get_group_name_by_class_code(group)] = group
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.",
            reply_markup=additional_classes_kb.del_group(groups_dict)
    )

@user_router.callback_query()
async def add_group_btn(call: CallbackQuery):
    groups = db.fetch("""select additional_classes from users where chat_id = %s""", call.message.chat.id)[0][0]

    await call.answer('')
    if 'delete_' in call.data:
        code = call.data[7:]
        groups.remove(int(code))
        db.execute(
            """update users set additional_classes = %s where chat_id = %s""",
            groups, call.message.chat.id
        )
        if len(groups) >= 1:
            groups_dict = {}
            for group in groups:
                groups_dict[await get_group_name_by_class_code(group)] = group
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.",
                reply_markup=additional_classes_kb.del_group(groups_dict)
            )
        else:
            await call.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")


@user_router.message()
async def user_cmd(msg: Message):
    await msg.answer("–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû")
